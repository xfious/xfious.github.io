<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>machine-learning on XFious</title>
        <link>https://example.org/tags/machine-learning/</link>
        <description>Recent content in machine-learning on XFious</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <managingEditor>xfious@outlook.com (XFious)</managingEditor>
        <webMaster>xfious@outlook.com (XFious)</webMaster>
        <lastBuildDate>Wed, 22 Mar 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://example.org/tags/machine-learning/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>An Evaluation of Four P300 ERP Classifiers&#39; Generalization Performance in the Oddball Paradigm</title>
        <link>https://example.org/project/eeg-classify/</link>
        <pubDate>Wed, 22 Mar 2023 00:00:00 +0000</pubDate>
        <author>xfious@outlook.com (XFious)</author>
        <guid>https://example.org/project/eeg-classify/</guid>
        <description>&lt;img src="https://example.org/project/eeg-classify/fig6.png" alt="Featured image of post An Evaluation of Four P300 ERP Classifiers&#39; Generalization Performance in the Oddball Paradigm" /&gt;&lt;h1 id=&#34;an-evaluation-of-four-p300-erp-classifiers-generalization-performance-in-the-oddball-paradigm&#34;&gt;An Evaluation of Four P300 ERP Classifiers&amp;rsquo; Generalization Performance in the Oddball Paradigm&lt;/h1&gt;
&lt;h1 id=&#34;abstract&#34;&gt;Abstract&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;For classifying P300 event-related potential, usually need prior knowledge about the EEG signal during the target and non-target stimuli. However, different classifiers need different amounts of data to achieve a usable classification ability. In this final project, I explored 4 different classifiers and compared their generalization performance on one P300 dataset which took place in GIPSA-lab, 2015. The dataset includes 43 participants. There are 4 classifiers involved in this project, which are LDA, SVM, Random Forest, and EEGNet. They are fed with similar epochs, merely adjusted based on each classifierâ€™s requirement. The metric to measure their performance is F1, since the class is imbalanced. The result shows that the LDA has the high and most stable performance, and the SVM shows the potential to have the highest F1 with more data from the same participant who has been tested on. Overall, based on the procedures and implementation used in this project, the number of pretraining date does not impact much on the performance; the different type of classifier shows a relatively greater influence.
Code for this project: &lt;a class=&#34;link&#34; href=&#34;https://github.com/XiaonanFu-ucsd/COGS189-final-project&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/XiaonanFu-ucsd/COGS189-final-project&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;1-introduction&#34;&gt;1. Introduction&lt;/h1&gt;
&lt;p&gt;P300 ERP is evoked when a person perceives a target stimuli, and it associates with the decision-making process that something important had occurred (Picton, 1992). Therefore, the P300 ERP is a good indicator to show whether the event is important for the person. In this scenario, the event is known from the outside, but what the person wants is something unknown. The P300 ERP can tell whether the event is the target, given that the event happened. In application, the P300 ERP can be used to build speller, or to control a cursor to move.&lt;/p&gt;
&lt;p&gt;P300 ERP changes among population and time. For doing the classification of P300 ERP, the system need to know the P300 ERP of the user, or use some prior knowledge about P300 (Ramele et al., 2018). An ideal system does not need training, or very short training, before someone uses it. Hence it challenges the system to be accurate with a small amount of data, usually in non-clinical applications. If the system can learn the common pattern of P300 before a user uses it, then the amount of data needed for training will be greatly reduced, making the BCI convenient to use.&lt;/p&gt;
&lt;p&gt;In this project, I explored 4 different classifiers, as a part of the P300 system, to see how they perform across participants. With the different levels of pretraining data, I compared how much fine-tuning data, i.e. training data, is required to achieve a good performance. To fairly compare each classifier, everyone received the epochs from the similar preprocessing method. Some classifiers cannot utilize parallel computing. To make the training possible and can be done in a reasonable time, they may only use a portion of the data, such as 3000 observations (one observation is a time window after a event). Besides, classifiers receive different numbers of time samples within one observation, due to the efficiency of the algorithm. All the classifiers should finish the training within a few seconds.&lt;/p&gt;
&lt;p&gt;There are three hypothetical factors that may affect the generalization performance: amount of pretraining data, amount of training data, and the type of classifier. For each classifier, it gets a certain level of pretraining, and then gets certain amount of training on the user&amp;rsquo;s EEG data. All of them will test on the same set of data. In summary, there are 3 stages: pre-train, training, and testing. Their performance will be compared using the f1 score.&lt;/p&gt;
&lt;h1 id=&#34;2-dataset&#34;&gt;2. Dataset&lt;/h1&gt;
&lt;p&gt;The dataset of the project includes 50 participants, using 32 active wet electrodes, with a visual P300 BCI videogame named Brain Invaders. The experiment took place at GIPSA-lab, Grenoble, France, in 2015 (Korczowski et al., 2019). Based on the document about this dataset, it uses a similar paradigm as the P300 speller, which has 36 symbols, and they will flash in groups but not by row and columns (Congedo et al., 2011). After a certain time, the symbol which represents the character in the game moves slowly. To make the P300 more independent, and prevent the participants&amp;rsquo; emotions affect the EPR when they play it, the game only shows the score between each round. The experimenter already removes one participant who does not have a visible alpha wave, and six participants have some error in their data.&lt;/p&gt;
&lt;p&gt;The sampling rate of the dataset is 512 Hz. The data is not clean before any filtering, and it can be shown by the power spectrum of the data. The peak at 50 Hz is the power line noise. And the peak at 150 Hz is unknown noise.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.org/project/eeg-classify/fig1.png&#34;
	width=&#34;571&#34;
	height=&#34;473&#34;
	srcset=&#34;https://example.org/project/eeg-classify/fig1_hua14b7339d80f6473a579485e5ee3340c_42132_480x0_resize_box_3.png 480w, https://example.org/project/eeg-classify/fig1_hua14b7339d80f6473a579485e5ee3340c_42132_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;power spectrum&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;120&#34;
		data-flex-basis=&#34;289px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;figure 1. Power spectrum of the Pz channel, after filtering&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.org/project/eeg-classify/fig2.png&#34;
	width=&#34;559&#34;
	height=&#34;473&#34;
	srcset=&#34;https://example.org/project/eeg-classify/fig2_huadfdfa37b1eb8d06d36be59d142a368e_41629_480x0_resize_box_3.png 480w, https://example.org/project/eeg-classify/fig2_huadfdfa37b1eb8d06d36be59d142a368e_41629_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;power spectrum&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;118&#34;
		data-flex-basis=&#34;283px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;figure 2. Power spectrum of the Pz channel, before filtering&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;After filtering using the FIR bandpass filter from 1 to 24 Hz, the power spectrum of the data is shown in the right figure. The bandwidth is used in the example classification code for this dataset (Korczowski et al., 2019). In some other studies, the bandwidth is 0.1 to 30 Hz. Shrinking the bandwidth is reasonable because the P300 ERP is a slow wave. The article from Duncan-Johnson et al. presents that a high-pass filter higher than 0.1 Hz will distort the P300 ERP. In this project, 0.1 or 1 does not make a difference in the performance.&lt;/p&gt;
&lt;p&gt;Each participant experienced about 1500 events in the whole recording. The ratio of target versus non-target is one-to-five. After averaging all the time windows for target and non-target, it shows a clear difference between the curve, which means the P300 classification is possible on this dataset (Figure 3)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.org/project/eeg-classify/fig3.png&#34;
	width=&#34;1430&#34;
	height=&#34;485&#34;
	srcset=&#34;https://example.org/project/eeg-classify/fig3_hu7d11cc6100b889156332ab3a384e9878_110896_480x0_resize_box_3.png 480w, https://example.org/project/eeg-classify/fig3_hu7d11cc6100b889156332ab3a384e9878_110896_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;294&#34;
		data-flex-basis=&#34;707px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;figure 3. An example of event related potential recored at channel Pz&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;After filtering, the ICA processing detects abnormal variance in some components. Using MNE, the sources are shown below (Figure 6). The artifacts may be blinking artifacts because of their amplitude (Figure 7). They usually are collected from the frontal electrodes.&lt;/p&gt;
&lt;p&gt;The dataset does not include the EOG data, so there is no explicit reference to indicate which component is due to the blinking artifact. I manually select some components which have high amplitude or sudden spikes, and remove them from the data. The result is shown below (Figure 8 &amp;amp; 9). Here is the component I choose: 0, 1, 2, 4, 6, 8.&lt;/p&gt;
&lt;p&gt;Since ICA does not make a significant difference in later classification performance, but increases the preprocessing complexity, I decide to not use ICA in the later analysis.&lt;/p&gt;
&lt;p&gt;The dataset is split into 2 parts. Subjects 1-30 is the range for pretraining, and subjects 31-43 is the range for training and testing. The pretraining data is used to warm up the classifier, and the training data is used to fine-tune the classifier.&lt;/p&gt;
&lt;p&gt;Every channel is used because the P300 ERP is not localized to a specific area. If the Random forest and LDA only use the Pz channel, the f1 score is much lower than using all the channels. Although Pz channel is the most informative channel for P300 ERP, seemingly it is still too noisy to be used alone.&lt;/p&gt;
&lt;h1 id=&#34;3-method&#34;&gt;3. Method&lt;/h1&gt;
&lt;h2 id=&#34;31-preprocessing&#34;&gt;3.1 Preprocessing&lt;/h2&gt;
&lt;p&gt;For P300 classification tasks, the time window after the event is most informative. Since the system does not need to know when is the event because the event time is known, it is unnecessary to feed in full series of EEG data and let the system decide whether the time window is related to the event. After filtering the data from 1 to 24 Hz, the data is epoched into 800ms windows after the event. 800ms should be long enough to capture the ERP because P300 ERP is usually between 300 to 500 ms with respect to the person&amp;rsquo;s age (Picton, 1992). Also, some papers use 800ms windows to capture the P300 ERP (Oralhan, 2019).&lt;/p&gt;
&lt;p&gt;Observations have different mean and variance. To make the classifier more robust, the data is normalized by subtracting the mean and dividing by the standard deviation. Zeroing the average can force all observations into the same range. Normalizing the variance by dividing every observation by its own standard deviation can uniform the amplitude of the wave, and allow the classifier to extract more information from the pattern and changes.&lt;/p&gt;
&lt;p&gt;This is an example time window from participant 3, after filtering and normalization (Figure 4). All data undergoes the above preprocessing. However, the classifiers may need other modifications to make the data fit their requirement.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.org/project/eeg-classify/fig4.png&#34;
	width=&#34;1749&#34;
	height=&#34;1300&#34;
	srcset=&#34;https://example.org/project/eeg-classify/fig4_hu085ba3987ff03d75cc8156869a72f936_1068723_480x0_resize_box_3.png 480w, https://example.org/project/eeg-classify/fig4_hu085ba3987ff03d75cc8156869a72f936_1068723_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;134&#34;
		data-flex-basis=&#34;322px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;figure 4. An example of a time window after filtering and normalization, 3-second segment of filtered data, from subject 3.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;32-classifier-random-forest&#34;&gt;3.2 Classifier: Random Forest&lt;/h2&gt;
&lt;p&gt;Random Forest is an ensemble method widely used in the industry. It is non-linear and can easily handle high-dimension data. The ensemble attribute of Random Forest makes it can compute parallelly, which is suitable for large datasets.&lt;/p&gt;
&lt;p&gt;Before training the Random Forest, each observation subtracts the mean of the baseline, which is 0 - 100 ms after the event. the ERP start is set to 200ms, and the ERP end is set to 800ms. The ERP windows are split into 18 segments and the mean of each segment is used as the feature. Observations are reshaped into a vector of 18 * 32 = 576 features.&lt;/p&gt;
&lt;p&gt;The Random Forest contains 75  decision trees, and the maximum depth of each tree is 75. The hyperparameters are found by grid search. To fix the imbalance of the data, the class weight is set to 0.5:20. I used this large ratio because the false negative is much large than the true positive in other settings. This model does not support incremental training in scikit-learn, so the pretraining process actually happens in the trainging process, by merge the pretraining data and the training data.&lt;/p&gt;
&lt;h2 id=&#34;33-classifier-svm&#34;&gt;3.3 Classifier: SVM&lt;/h2&gt;
&lt;p&gt;Support Vector Machine is sensitive to dimensionality, and too many samples make it hard to train. Therefore, I set the maximum number of training data to 3500. It has the same preprocessing as Random Forest, but only uses 8 segments of the ERP windows. Hence the feature vector is 8 * 32 = 256. The class weight is 0.5:2. This SVM uses linear kernel, and the constraint is set to 0.1. The model does not fit if it uses RBF as the kernel.&lt;/p&gt;
&lt;p&gt;SVM does not support incremental training, so the pretraining process is similar to Random Forest. However, the SVM has a limitation on the amount of training data. If pretrain + train &amp;gt; 3500, the array will be filled with training data first, and then use shuffled pretraining data to fill the rest. The pretraining data are from different subjects, so shuffling makes the final training data be more diverse.&lt;/p&gt;
&lt;h2 id=&#34;34-classifier-lda&#34;&gt;3.4 Classifier: LDA&lt;/h2&gt;
&lt;p&gt;Linear Discriminant Analysis is a linear classifier and it is efficient to train. However, seems like the scikit-learn implementation of LDA has bugs on the Linux platform. With a high amount of training data, approximately 3000, the system stops responding. Therefore, I set the maximum number of training data to 1500. It uses the same method as SVM to handle oversize training data. It has the same preprocessing as Random Forest, but only uses 6 segments of the ERP windows, the shape of the feature vector is 6 * 32 = 192.&lt;/p&gt;
&lt;h2 id=&#34;35-classifier-eegnet&#34;&gt;3.5 Classifier: EEGNet&lt;/h2&gt;
&lt;p&gt;EEGNet uses the convolution neural network and the power of deep learning to alleviate the process of feature extraction (Lawhern, 2018). According to the paper, it performs well on various EEG datasets, including P300, SMR, and ERN. The recommended setting of EEGNet is to downsample the data to 128 Hz, and embed 3 convolutional layers as filters and one fully connected layer as output. In my implementation using PyTorch, the first convolutional layer has 16 kernels with size of 1 * 64. The second convolutional layer is a depthwise filter with 32 kernels. The third one is a separable conv2d with 32 depthwise filters (1&lt;em&gt;32) and 64 pointwise filters (1&lt;/em&gt;1). This design allows the CNN to have enough filters to fit different patterns, and wide enough to see a slow wave such as P300. The activation function is ELU, and the dropout rate is 0.3 to prevent overfitting. There are batch normalization between layers, and two average pooling layers to reduce the dimensionality. The reference code can be found at (&lt;a class=&#34;link&#34; href=&#34;https://github.com/vlawhern/arl-eegmodels/blob/master/EEGModels.py&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/vlawhern/arl-eegmodels/blob/master/EEGModels.py&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Since the convolutional layer is good at capturing temporal ad spatial information, I did not subtract the baseline. The data is downsampled to 128 Hz, and the full observation is used as the feature. The maximum number of iterations of epoch is set to 200. The batch size is 512; the learning rate is 0.001; the loss function is cross entropy because it is convenient to set class weight, which is 1:5.4.&lt;/p&gt;
&lt;p&gt;Among all the 4 classifiers, EEGNet is the only one that can be trained incrementally, which means the model&amp;rsquo;s weights carry over from the previous training. The training process will only include the data from the current subject.&lt;/p&gt;
&lt;h2 id=&#34;36-evaluation-performance-metric-and-testing&#34;&gt;3.6 Evaluation: Performance metric and testing&lt;/h2&gt;
&lt;p&gt;Pretraining amount have 5 levels: none, 1, 3, 10, 30 subjects. For example, if the pretraining count is 3, theoretically, the model will be pretrained with the first 3 subject&amp;rsquo;s full records.&lt;/p&gt;
&lt;p&gt;The training amount have 10 levels, which are 0 to 900. For all 13 subjects in the testing range, the model will be trained with the first 0 to 900 data from each subject, and then tested on the data after index 900. The process is independent for each testing subject. For example, when I evaluate the EEGNet-3 model (i.e. EEGNet pretrained with 3 subjects), the program load the pretrained model, and directly tests on the data[901:] from subject 31, because now the training amount is 0. Then, the program load the pretrained model again, and train on the data[:100] from subject 31, and test on the same data[901:]. The program will repeat this process for all 13 subjects. The f1 score is the average among them, given a certain pretraining amount and training amount. The classifier must be trained with something, so the pretraining and training will not be 0 at the same time.&lt;/p&gt;
&lt;p&gt;The F1 macro score is a suitable metric for a binary classification problem. It shows the balance between precision and recall, and it considers the accuracy of the positive and negative classes under the same priority. Accuracy itself is not a good metric for this problem, because the data is imbalanced. If the model always predicts 0, it will have high accuracy, but the precision and recall will be very low for positive class. For the F1 score, if the model always predicts 0, the F1 score will be 0.148 in this case. I did not use AUC because it need the model to output the probability, which needs some modification to the EEGNet and rerun the test.&lt;/p&gt;
&lt;h1 id=&#34;4-result&#34;&gt;4. Result&lt;/h1&gt;
&lt;p&gt;The result shows that the SVM is most sensitive to the amount of training. With more data from the current user, it performs better. The one-way ANOVA that evaluates the influence of training amount on the f1 score also supports this result (p = 0.00). Other classifiers are not sensitive to the training amount.&lt;/p&gt;
&lt;p&gt;However, the plot and the ANOVA show a disagreement about the pretraining. Only the plot of Random Forest indicates that it is sensitive to the pretraining amount. For other classifiers, the ANOVA p-value is very close to 0.00, but there is no clear trend in the plot. In addition, the EEGNet_3 curve is obviously abnormal, which shows a violent variation. Maybe there is some error during the pretraining process.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.org/project/eeg-classify/fig5.png&#34;
	width=&#34;1430&#34;
	height=&#34;1078&#34;
	srcset=&#34;https://example.org/project/eeg-classify/fig5_hu01cb5c5aae3898738ab0f7eaa7697c0d_275565_480x0_resize_box_3.png 480w, https://example.org/project/eeg-classify/fig5_hu01cb5c5aae3898738ab0f7eaa7697c0d_275565_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;132&#34;
		data-flex-basis=&#34;318px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Figure 5: The f1 score for each classifier is shown in this plot. The x-axis is the training amount, and the different lines represent different pretraining amount.&lt;/em&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Random Forest&lt;/th&gt;
&lt;th&gt;SVM&lt;/th&gt;
&lt;th&gt;LDA&lt;/th&gt;
&lt;th&gt;EEGNet&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Pretrain&lt;/td&gt;
&lt;td&gt;0.000&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.000&lt;/td&gt;
&lt;td&gt;0.000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Train&lt;/td&gt;
&lt;td&gt;0.925&lt;/td&gt;
&lt;td&gt;0.000&lt;/td&gt;
&lt;td&gt;0.765&lt;/td&gt;
&lt;td&gt;0.113&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;em&gt;Table 1: the p-value from one-way ANOVA; A lower p-value shows a higher likelihood that the factor causes the change.&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Random Forest is unaffected with respect to the training amount, but its performance increase with more pretraining data. It can be the result that pretraining data is much more than the training data. Even if it just pretrained with 1 subject&amp;rsquo;s data, it still gets about 5000 observations, because subject 1 has 5000 trials. The model saturates after 10 subjects, about 18000 observations, and the f1 score is mediocre.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SVM shows a clear trend that more training data will lead to much better performance. The pretraining does not impact much; the reason can be the 3500 limitations, which makes it cannot fully utilize the pretraining data. With more training data, it has the best performance. SVM is optimal for long term and personal BCI.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;LDA has the highest performance among all 4 classifiers, and the pretraining and training do not affect its performance. It makes LDA a good choice in the application of P300 BCI in general, if the data is limited.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;EEGNet is slightly better than the Random Forest, but clearly worse than SVM and LDA. The pretraining does not improve its generalization. Seems like the training data amount has a positive impact, but the statistical test does not support this statement. It is possible that due to my implement and filter design, it overfits the pretraining and training data, since the accuracy is close to 1.00 on those parts.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;5-discussion&#34;&gt;5. Discussion&lt;/h1&gt;
&lt;p&gt;I was not expected that the most challenging thing is to make LDA and Random Forest fit this dataset before I wrote the code to compare classifiers. Using these two models, I tried many different ways to make them stop classifying every point as negative, such as adjusting the class weight, removing artifacts, only using certain channels, and combining multiple classifiers to let them vote. After weeks of experiments, I accidentally found that the most significant factor is the step between preprocessing and training, which is reshaping the feature vector. The original shape of each time window is (T, C), such that T is the number of time points, and C is the number of channels. In this case, reshape function breaks the temporal structure, leading to a complete mixture in high dimensional space. After changing the shape to (C, T), the model can finally learn the temporal information.&lt;/p&gt;
&lt;p&gt;The result shows that the traditional machine learning methods still have their own advantage in P300 BCI. The LDA and SVM cannot fully utilize the pretraining data and computing power, but they still perform well with a limited amount of data, which is important in real-world EEG applications. EEGNet has the potential to be an ideal model since it is good at capturing temporal and spatial information, and it can be trained incrementally. However, at least in my implementation and this dataset, EEGNet fails to meet my expectation overall.&lt;/p&gt;
&lt;p&gt;It is worth mentioning that classification is just one step in the BCI pipeline, and BCI application is much more than accurate. How to use the classification result, how to collect the data in a comfortable and efficient way, how to make the system robust, and many other aspects need to be considered if a BCI is for users, rather than research only.&lt;/p&gt;
&lt;h1 id=&#34;6-reference&#34;&gt;6. Reference&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Congedo, M., Goyat, M., Tarrin, N., Ionescu, G., Varnet, L., Rivet, B., &amp;hellip; &amp;amp; Jutten, C. (2011, September). &amp;quot; Brain Invaders&amp;quot;: a prototype of an open-source P300-based video game working with the OpenViBE platform. In BCI 2011-5th International Brain-Computer Interface Conference (pp. 280-283).&lt;/li&gt;
&lt;li&gt;Duncan-Johnson CC, Donchin E. The time constant in P300 recording. Psychophysiology 1979:16:53-5.&lt;/li&gt;
&lt;li&gt;Korczowski, L., Cederhout, M., Andreev, A., Cattan, G., Rodrigues, P. L. C., Gautheret, V., &amp;amp; Congedo, M. (2019). Brain Invaders calibration-less P300-based BCI with modulation of flash duration Dataset (bi2015a) (Doctoral dissertation, GIPSA-lab).&lt;/li&gt;
&lt;li&gt;Lawhern, V. J., Solon, A. J., Waytowich, N. R., Gordon, S. M., Hung, C. P., &amp;amp; Lance, B. J. (2018). EEGNet: a compact convolutional neural network for EEG-based brainâ€“computer interfaces. Journal of neural engineering, 15(5), 056013.&lt;/li&gt;
&lt;li&gt;Oralhan, Z. (2019). A new paradigm for region-based P300 speller in brain computer interface. Ieee Access, 7, 106618-106627.&lt;/li&gt;
&lt;li&gt;Picton, T. W. (1992). The P300 wave of the human event-related potential. Journal of Clinical Neurophysiology, 9(4), 456â€“479.&lt;/li&gt;
&lt;li&gt;Ramele, R., Villar, A., Santos, J. (2018). EEG waveform analysis of P300 ERP with applications to brain computer interfaces. Brain Sciences, 8(11), 199.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;7-appendix&#34;&gt;7. Appendix&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;https://example.org/project/eeg-classify/fig6.png&#34;
	width=&#34;1032&#34;
	height=&#34;779&#34;
	srcset=&#34;https://example.org/project/eeg-classify/fig6_hu3a3edbb572f981d3ec8c1dfd133d5977_1016109_480x0_resize_box_3.png 480w, https://example.org/project/eeg-classify/fig6_hu3a3edbb572f981d3ec8c1dfd133d5977_1016109_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;132&#34;
		data-flex-basis=&#34;317px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Figure 6: the source of each ICA component&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.org/project/eeg-classify/fig7.png&#34;
	width=&#34;1353&#34;
	height=&#34;776&#34;
	srcset=&#34;https://example.org/project/eeg-classify/fig7_hu48a8351c3440e3d95eba0b94713db999_399139_480x0_resize_box_3.png 480w, https://example.org/project/eeg-classify/fig7_hu48a8351c3440e3d95eba0b94713db999_399139_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;174&#34;
		data-flex-basis=&#34;418px&#34;
	
&gt;
&lt;em&gt;Figure 7: ICA components&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.org/project/eeg-classify/fig8.png&#34;
	width=&#34;1430&#34;
	height=&#34;821&#34;
	srcset=&#34;https://example.org/project/eeg-classify/fig8_huf6d2f0d05a3246d7e9e2cbc3e002d30a_876319_480x0_resize_box_3.png 480w, https://example.org/project/eeg-classify/fig8_huf6d2f0d05a3246d7e9e2cbc3e002d30a_876319_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;174&#34;
		data-flex-basis=&#34;418px&#34;
	
&gt;
&lt;em&gt;Figure 8: EEG before ICA correction&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.org/project/eeg-classify/fig9.png&#34;
	width=&#34;1430&#34;
	height=&#34;821&#34;
	srcset=&#34;https://example.org/project/eeg-classify/fig9_hu757c0fec8f102787892b749bb57270b2_909417_480x0_resize_box_3.png 480w, https://example.org/project/eeg-classify/fig9_hu757c0fec8f102787892b749bb57270b2_909417_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;174&#34;
		data-flex-basis=&#34;418px&#34;
	
&gt;
&lt;em&gt;Figure 9: EEG after ICA correction&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.org/project/eeg-classify/fig10.png&#34;
	width=&#34;1430&#34;
	height=&#34;1078&#34;
	srcset=&#34;https://example.org/project/eeg-classify/fig10_hu5c8eecd29b2409568044ec0991f34b9b_255507_480x0_resize_box_3.png 480w, https://example.org/project/eeg-classify/fig10_hu5c8eecd29b2409568044ec0991f34b9b_255507_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;132&#34;
		data-flex-basis=&#34;318px&#34;
	
&gt;
&lt;em&gt;Figure 10: Accuracy for the classifiers. Since the data is imbalanced, this plot is just for reference.&lt;/em&gt;&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
